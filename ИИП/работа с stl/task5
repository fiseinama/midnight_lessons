//–í–æ –≤—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –∑–∞–¥–∞–Ω –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏. –ù–∞–π—Ç–∏ ùëò —Å–ª–æ–≤, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —á–∞—â–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.

#include<iostream>
#include<algorithm>
#include<string>
#include<map>
using namespace std;

int main11() {
	setlocale(LC_ALL, "RU");
	
	map<string, int> words;
	string ss;

	cout << "–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: ";
	while (cin >> ss && ss != "-") {
		bool isWord = true;

		for (char c : ss) {
			if (isdigit(c)) {
				isWord = false; //–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã, —Ç–æ —ç—Ç–æ –Ω–µ —Å–ª–æ–≤–æ
				break;
			}
		}
		if (isWord)
			words[ss]++;

	}

	int k;
	cout << "–í–≤–µ–¥–∏—Ç–µ k: ";
	cin >> k;
	cout << "k —Å–ª–æ–≤, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è —á–∞—â–µ:" << endl;

	for (int i = 0; i < k; i++) {
		auto maxElem = max_element(words.begin(), words.end(),
			[](const auto& a, const auto& b) {
				return a.second < b.second; 
			});

		if (maxElem == words.end()) break;

		cout << maxElem->first << " - " << maxElem->second << " —Ä–∞–∑(–∞)\n";
		words.erase(maxElem);
	}

	return 0;
	
}



