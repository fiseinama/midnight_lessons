// Дан ориентированный граф. Вывести все истоки графа.

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void bfs(const vector<vector<int>>& graph, const vector<int>& sources, vector<bool>& visited) {
    queue<int> q;
    for (int s : sources) { // добавляем все истоки в очередь и помечаем их как посещенные
        visited[s] = true;
        q.push(s);
    }

    while (!q.empty()) {
        int v = q.front(); // берем вершину из начала очереди и удаляем ее
        q.pop(); 
        for (int u : graph[v]) { // перебираем все смежные вершины
            if (!visited[u]) {
                visited[u] = true;
                q.push(u); // добавляем в очередь для дальнейшего обхода
            }
        }
    }
}

int main() {
    setlocale(LC_ALL, "RU");
    int N, M;
    cout << "Введите количество вершин и рёбер: ";
    cin >> N >> M;

    vector<vector<int>> graph(N);
    vector<int> indegree(N, 0); // вектор для подсчета входящих ребер

    for (int i = 0; i < M; ++i) {
        int u, v;
        cin >> u >> v;
        if (u < 1 || u > N || v < 1 || v > N)
            continue;

        graph[u - 1].push_back(v - 1); // в списке смежности добавляем направление из u в v
        indegree[v - 1]++;
    }

    // находим истоки — вершины с indegree == 0
    vector<int> sources; // для хранения истоков 
    cout << "Истоки графа (вершины без входящих рёбер): ";
    for (int i = 0; i < N; ++i) {
        if (indegree[i] == 0) { // если нет входящих ребер
            cout << (i + 1) << " ";
            sources.push_back(i);
        }
    }

    return 0;
}
