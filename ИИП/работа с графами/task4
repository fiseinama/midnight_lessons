// Дан неориентированный граф. Выяснить, является ли граф связным.

#include <iostream>
#include <vector>

using namespace std;

void dfs(int v, const vector<vector<int>>& graph, vector<bool>& visited) {
    visited[v] = true; // посещаем текущую вершину как посещенную
    for (int u : graph[v]) { // перебираем все смежные вершины
        if (!visited[u]) { // если вершина еще не посещена
            dfs(u, graph, visited); // рекурсивно вызываем dfs от нее
        }
    }
}

int main() {
    setlocale(LC_ALL, "RU");
    int N, M; 
    cout << "Введите количество вершин и ребер: ";
    cin >> N >> M;

    vector<vector<int>> graph(N); 

    for (int i = 0; i < M; ++i) {
        int x, y;
        cin >> x >> y;
        if (x < 1 || x > N || y < 1 || y > N)
            continue;

        // добавляем ребро 
        graph[x - 1].push_back(y - 1);
        graph[y - 1].push_back(x - 1);
    }

    vector<bool> visited(N, false); // хранит, какие вершины уже были посещены, начала все — false
    dfs(0, graph, visited); // запускаем dfs из вершины 0 (с индексом 0)

    // проверяем все ли вершины посещены
    bool connected = true;
    for (bool v : visited) {
        if (!v) { // если хотя бы одна не посещена - граф несвязный
            connected = false;
            break;
        }
    }

    if (connected) {
        cout << "Граф связный\n";
    }
    else {
        cout << "Граф несвязный\n";
    }

    return 0;
}
