// Создать двусвязный список, содержащий целые числа. Перенести в начало списка четные числа. Например, было 1 2 3 4 5 6 7 8 9, стало 2 4 6 8 1 3 5 7 9 

#include <iostream>
using namespace std;

struct list {
    int inf;
    list* next;
    list* prev;
};

// добавление элемента в конец списка
void push(list*& h, list*& t, int x) {
    list* r = new list;
    r->inf = x;
    r->next = NULL;
    if (!h && !t) {
        r->prev = NULL;
        h = t = r;
    }
    else {
        t->next = r;
        r->prev = t;
        t = r;
    }
}

// вставка элемента перед заданным узлом
void insert_before(list*& h, list*& t, list* pos, int x) {
    list* r = new list;
    r->inf = x;
    r->next = pos; // новый элемент указывает на pos

    if (!pos) {  // если pos == NULL, вставляем в конец (если список пуст)
        if (!h) {
            r->prev = NULL; // у нового элемента нет предыдущего
            h = t = r;
        }
        else {
            r->prev = t; // предыдущий для нового - текущий хвост, следующий для хвоста - новый элемент
            t->next = r;
            t = r;
        }
    }
    else if (pos == h) {  // вставка в начало
        r->prev = NULL;
        pos->prev = r; // предыдущий для бывшей головы - новый элемент
        h = r;
    }
    else {  // вставка в середину
        r->prev = pos->prev; // новый элемент указывает назад на того, кто был перед pos
        pos->prev->next = r;  // элемент до pos теперь указывает вперёд на новый элемент.
        pos->prev = r;           // предыдущий для pos - новый элемент
    }
}

// удаление узла из списка
void del_node(list*& h, list*& t, list* r) {
    if (r == h && r == t) {
        h = t = NULL;
    }
    else if (r == h) {
        h = h->next;
        if (h) h->prev = NULL;
    }
    else if (r == t) {
        t = t->prev;
        if (t) t->next = NULL;
    }
    else {
        r->next->prev = r->prev;
        r->prev->next = r->next;
    }
    delete r;
}

// вывод списка
void print(list* h) {
    list* p = h;
    while (p) {
        cout << p->inf << " ";
        p = p->next;
    }
    cout << endl;
}

// перемещаем все четные элементы в начало
void evensToFront(list*& h, list*& t) {
    list* p = h;
    list* lastEven = NULL;  // указатель на последний вставленный четный элемент

    while (p) {
        list* next = p->next; // сохраняем указатель на след узел
        if (p->inf % 2 == 0) {
            int val = p->inf; // сохраняем значение
            del_node(h, t, p);  // удаляем текущий узел p

            if (!lastEven) {
                // если это первое чётное число, вставляем в самое начало перед h
                insert_before(h, t, h, val);
                lastEven = h;  // теперь lastEven указывает на этот вставленный элемент
            }
            else { // если уже есть четные
                insert_before(h, t, lastEven->next, val);      // вставляем после последнего четного
                lastEven = lastEven->next;  // сдвигаем указатель на новый элемент
            }
        }
        p = next;
    }
}

int main() {
    setlocale(LC_ALL, "RU");
    list* head = NULL;
    list* tail = NULL;

    int n;
    cout << "Введите количество элементов: ";
    cin >> n;

    cout << "Введите " << n << " целых чисел:\n";
    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        push(head, tail, x);
    }

    evensToFront(head, tail);

    cout << "Результат: ";
    print(head);

    return 0;
}
