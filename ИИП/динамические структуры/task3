// Создать стек, содержащий целые числа. После  всех максимальных чисел вставить минимальное число. 
// Порядок следования в результате должен совпадать с порядком следования ввода. 
// Например, было 2 8 4 1 2 8 8 1 2 8 Стало 2 8 1 4 1 2 8 1 8 1  1 2 8 1

#include <iostream>
using namespace std;

// структура узла стека
struct Node {
    int data;       // данные, хранящиеся в узле
    Node* next;     // указатель на следующий узел в стеке

    // конструктор узла
    Node(int val) : data(val), next(nullptr) {}
};

// класс стека на основе связного списка
class Stack {
private:
    Node* top;      // указатель на вершину стека (последний добавленный элемент)

public:
    // конструктор: инициализирует пустой стек
    Stack() : top(nullptr) {}

    // деструктор: освобождает память, удаляя все элементы стека
    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    // добавление элемента на вершину стека
    void push(int val) {
        Node* newNode = new Node(val);  // создаем новый узел
        newNode->next = top;            // новый узел ссылается на текущую вершину
        top = newNode;                  // обновляем вершину стека
    }

    // удаление элемента с вершины стека
    int pop() {
        if (isEmpty()) {
            return -1;  // возвращаем -1 в случае ошибки (стек пуст)
        }
        Node* temp = top;      // сохраняем указатель на удаляемый узел
        int val = temp->data;   // сохраняем данные из удаляемого узла
        top = top->next;        // перемещаем вершину на следующий узел
        delete temp;            // освобождаем память удаляемого узла
        return val;             // возвращаем значение удаленного элемента
    }

    // проверка, пуст ли стек
    bool isEmpty() {
        return top == nullptr;
    }

    // просмотр элемента на вершине стека без удаления
    int peek() {
        if (isEmpty()) {
            return -1;  // возвращаем -1 в случае ошибки
        }
        return top->data;  // возвращаем данные вершины стека
    }

    // вывод стека в порядке добавления (сначала первый добавленный элемент)
    void print() {
        Stack temp;  // временный стек для хранения элементов

        // перекладываем элементы в временный стек (меняем порядок)
        while (!isEmpty()) {
            temp.push(pop());
        }

        // выводим элементы и восстанавливаем исходный стек
        while (!temp.isEmpty()) {
            int val = temp.pop();  // извлекаем из временного стека
            cout << val << " ";    // выводим значение
            push(val);             // возвращаем в исходный стек
        }
        cout << endl;
    }
};

// функция обработки стека
void processStack(Stack& s) {
    if (s.isEmpty()) return;  // если стек пуст, ничего не делаем

    Stack temp;          // временный стек для хранения элементов
    int maxVal = s.peek();  // предполагаем, что вершина - максимальный элемент
    int minVal = s.peek();  // предполагаем, что вершина - минимальный элемент

    // первый проход: находим maxVal и minVal
    while (!s.isEmpty()) {
        int val = s.pop();  // извлекаем элемент из стека

        // обновляем максимальное и минимальное значения
        if (val > maxVal) maxVal = val;
        if (val < minVal) minVal = val;

        temp.push(val);  // добавляем элемент во временный стек
    }

    // второй проход: вставляем minVal после каждого maxVal
    while (!temp.isEmpty()) {
        int val = temp.pop();  // извлекаем из временного стека
        s.push(val);           // возвращаем в исходный стек

        // если нашли maxVal вставляем minVal после него
        if (val == maxVal) {
            s.push(minVal);
        }
    }
}

int main111() {
    setlocale(LC_ALL, "RU");

    Stack s;  // создаем стек
    int n, num;

    cout << "Введите количество элементов: ";
    cin >> n;

    cout << "Введите числа: " << endl;
    for (int i = 0; i < n; i++) {
        cin >> num;
        s.push(num);
    }

    cout << "Исходный стек: ";
    s.print();  

    // обрабатываем стек
    processStack(s);

    cout << "Результат: ";
    s.print();  

    return 0;
}
