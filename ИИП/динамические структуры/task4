// Создать стек, содержащий целые числа. Создать новый стек, вставив новый элемент после первого (первого, введенного с клавиатуры или из файла) 
// нечетного элемента. Порядок следования чисел в новом стеке должен совпадать с первоначальным. 
// Например, было 1 2 3 4 5 6 7 8 9, стало  1 0 2 3 4 5 6 7 8 9 

#include <iostream>
using namespace std;

// структура узла стека
struct Node {
    int data;       // данные, хранящиеся в узле
    Node* next;     // указатель на следующий узел в стеке

    // конструктор узла
    Node(int val) : data(val), next(nullptr) {}
};

// класс стека на основе связного списка
class Stack {
private:
    Node* top;      // указатель на вершину стека (последний добавленный элемент)

public:
    // конструктор: инициализирует пустой стек
    Stack() : top(nullptr) {}

    // деструктор: освобождает память, удаляя все элементы стека
    ~Stack() {
        while (!isEmpty()) {
            pop();
        }
    }

    // добавление элемента на вершину стека
    void push(int val) {
        Node* newNode = new Node(val);  // создаем новый узел
        newNode->next = top;            // новый узел ссылается на текущую вершину
        top = newNode;                  // обновляем вершину стека
    }

    // удаление элемента с вершины стека
    int pop() {
        if (isEmpty()) {
            return -1;  // возвращаем -1 в случае ошибки (стек пуст)
        }
        Node* temp = top;      // сохраняем указатель на удаляемый узел
        int val = temp->data;  // сохраняем данные из удаляемого узла
        top = top->next;       // перемещаем вершину на следующий узел
        delete temp;           // освобождаем память удаляемого узла
        return val;            // возвращаем значение удаленного элемента
    }

    // проверка, пуст ли стек
    bool isEmpty() {
        return top == nullptr;
    }

    // вывод стека в порядке добавления (первый добавленный - первый выведенный)
    void print() {
        Stack temp;  // временный стек для хранения элементов

        // перекладываем элементы во временный стек (меняем порядок)
        while (!isEmpty()) {
            temp.push(pop());
        }

        // выводим элементы и восстанавливаем исходный стек
        while (!temp.isEmpty()) {
            int val = temp.pop();  // извлекаем из временного стека
            cout << val << " ";    // выводим значение
            push(val);             // возвращаем в исходный стек
        }
        cout << endl;
    }
};

// функция для создания нового стека с вставкой элемента после первого нечетного
Stack insertAfterFirstOdd(Stack& original, int newElement) {
    Stack result;   // результирующий стек
    Stack temp;     // временный стек для хранения элементов
    bool inserted = false;  // флаг (был ли вставлен новый элемент)

    // перекладываем исходный стек во временный (инвертируем порядок)
    while (!original.isEmpty()) {
        temp.push(original.pop());
    }

    // формируем результирующий стек
    while (!temp.isEmpty()) {
        int val = temp.pop();
        result.push(val);       // добавляем текущий элемент в результат
        original.push(val);     // восстанавливаем исходный стек

        // если нашли первый нечетный и еще не вставляли новый элемент
        if (!inserted && val % 2 != 0) {
            result.push(newElement);  // вставляем новый элемент
            inserted = true;          // устанавливаем флаг вставки
        }
    }

    return result;
}

int main1111() {
    setlocale(LC_ALL, "RU");  

    Stack s;  // создаем стек
    int n, num, newElement;

    cout << "Введите количество элементов в стеке: ";
    cin >> n;

    cout << "Введите " << n << " целых чисел:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> num;
        s.push(num);
    }

    cout << "Введите новый элемент для вставки: ";
    cin >> newElement;

    cout << "\nИсходный стек: ";
    s.print();

    // создание нового стека с вставкой элемента
    Stack newStack = insertAfterFirstOdd(s, newElement);

    cout << "Новый стек: ";
    newStack.print();

    return 0;
}
