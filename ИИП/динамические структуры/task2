// Создать очередь, содержащую целые числа. После всех чисел, равных максимальному числу, вставить последний четный элемент. 
// Например, было  2 8 2 1 6 8 8 1 2 2 8 2 1. Стало  2 8 2 2 1 6 8 2 8 2 1 2 2 8 2 2 1   

#include <iostream>
using namespace std;

// структура узла очереди
struct Node {
    int data;       // данные, хранящиеся в узле
    Node* next;     // указатель на следующий узел в очереди

    // конструктор узла
    Node(int val) : data(val), next(nullptr) {}
};

// класс очереди на основе связного списка
class Queue {
private:
    Node* front;    // указатель на начало очереди (первый элемент)
    Node* rear;     // указатель на конец очереди (последний элемент)
    int size;       // текущее количество элементов в очереди

public:
    // конструктор: инициализирует пустую очередь
    Queue() : front(nullptr), rear(nullptr), size(0) {}

    // деструктор: освобождает память, удаляя все элементы очереди
    ~Queue() {
        while (!isEmpty()) {
            dequeue();
        }
    }

    // добавление элемента в конец очереди
    void enqueue(int val) {
        Node* newNode = new Node(val);  // создаем новый узел

        // если очередь пуста, новый узел становится и началом, и концом
        if (rear == nullptr) {
            front = rear = newNode;
        }
        else {
            rear->next = newNode;  // привязываем новый узел к концу очереди
            rear = newNode;       // обновляем указатель на конец очереди
        }
        size++;  // увеличиваем счетчик элементов
    }

    // удаление элемента из начала очереди
    int dequeue() {
        Node* temp = front;      // сохраняем указатель на удаляемый узел
        int val = temp->data;   // сохраняем данные из удаляемого узла

        front = front->next;     // перемещаем указатель начала на следующий узел

        // если после удаления очередь стала пустой, обнуляем и rear
        if (front == nullptr) {
            rear = nullptr;
        }

        delete temp;  // освобождаем память удаляемого узла
        size--;       // уменьшаем счетчик размера
        return val;   // возвращаем значение удаленного элемента
    }

    // просмотр первого элемента
    int peek() {
        return front->data;  // возвращаем данные первого элемента
    }

    // проверка на пустоту
    bool isEmpty() {
        return front == nullptr;  // очередь пуста, если front равен nullptr
    }

    // вывод содержимого очереди
    void print() {
        Node* current = front;  // начинаем с начала очереди

        // проходим по всем узлам и выводим их данные
        while (current != nullptr) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }
};

// функция обработки очереди
void processQueue(Queue& q) {
    if (q.isEmpty()) return;  // если очередь пуста, ничего не делаем

    // находим максимальный элемент и последний четный элемент
    int maxVal = q.peek();  // предполагаем, что первый элемент - максимальный
    int lastEven = -1;      // инициализируем последний четный элемент как -1 (не найден)
    Queue tempQueue;        // временная очередь для хранения элементов

    // первый проход: находим maxVal и lastEven
    while (!q.isEmpty()) {
        int val = q.dequeue();  // извлекаем элемент из основной очереди

        // обновляем максимальное значение, если текущий элемент больше
        if (val > maxVal) {
            maxVal = val;
        }

        // если элемент четный, обновляем lastEven
        if (val % 2 == 0) {
            lastEven = val;
        }

        tempQueue.enqueue(val);  // добавляем элемент во временную очередь
    }

    // восстанавливаем исходную очередь из временной
    while (!tempQueue.isEmpty()) {
        q.enqueue(tempQueue.dequeue());
    }

    // если четных элементов нет, завершаем функцию
    if (lastEven == -1) return;

    // второй проход: вставляем lastEven после каждого maxVal
    while (!q.isEmpty()) {
        int val = q.dequeue();
        tempQueue.enqueue(val);  // добавляем текущий элемент во временную очередь

        // если текущий элемент равен maxVal, добавляем lastEven после него
        if (val == maxVal) {
            tempQueue.enqueue(lastEven);
        }
    }

    // переносим обратно в основную очередь
    while (!tempQueue.isEmpty()) {
        q.enqueue(tempQueue.dequeue());
    }
}

int main11() {
    setlocale(LC_ALL, "RU"); 

    Queue q;  // создаем очередь
    int n, num;

    cout << "Введите количество элементов в очереди: ";
    cin >> n;

    cout << "Введите " << n << " целых чисел:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> num;
        q.enqueue(num);
    }

    cout << "\nИсходная очередь: ";
    q.print();  

    // обрабатываем очередь
    processQueue(q);

    cout << "Результат: ";
    q.print();  

    return 0;
}
