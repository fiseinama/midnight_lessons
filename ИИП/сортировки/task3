//По дате рождения (год, месяц, день) с помощью сортировки перемешиванием

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>

using namespace std;

struct Data {
    int day = 0;
    int month = 0;
    int year = 0;
};

struct Sotrudnik {
    string surname;
    string dolzhnost;
    Data dataR;
    int opyt = 0;
    double zarplata = 0.0;
};

// Проверка корректности даты
bool proverkaDat(const Data& data) {
    if (data.year < 1900 || data.year > 2025 || data.month < 1 || data.month > 12 || data.day < 1) {
        return false;
    }

    int dayinMonth[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    if (data.year % 4 == 0 && (data.year % 100 != 0 || data.year % 400 == 0)) {
        dayinMonth[2] = 29;
    }

    return data.day <= dayinMonth[data.month];
}

// Разбор даты из строки "дд.мм.гггг"
Data razborDati(const string& strokaDat) {
    Data data;
    char tochka1, tochka2;
    stringstream ss(strokaDat);

    if (!(ss >> data.day >> tochka1 >> data.month >> tochka2 >> data.year) || tochka1 != '.' || tochka2 != '.') {
        cout << "Неверный формат даты: " << strokaDat << endl;
        return { 0, 0, 0 };
    }

    if (!proverkaDat(data)) {
        cout << "Некорректная дата: " << strokaDat << endl;
        return { 0, 0, 0 };
    }

    return data;
}

// Чтение сотрудников из файла
vector<Sotrudnik> chitaySotrudnikov(const string& fio) {
    ifstream faylVhod(fio);
    vector<Sotrudnik> sotrudniki;
    string stroka;

    while (getline(faylVhod, stroka)) {
        stringstream ss(stroka);
        Sotrudnik sotr;
        string strokaDat;

        getline(ss, sotr.surname, ',');
        ss.ignore();

        getline(ss, sotr.dolzhnost, ',');
        ss.ignore();

        getline(ss, strokaDat, ','); // Читаем дату как строку
        sotr.dataR = razborDati(strokaDat);

        ss >> sotr.opyt;
        ss.ignore();
        ss >> sotr.zarplata;

        sotrudniki.push_back(sotr);
    }

    return sotrudniki;
}

// Запись сотрудников в файл
void zapisyvatSotrudnikov(const string& fio, const vector<Sotrudnik>& sotrudniki) {
    ofstream faylVydok(fio);
    if (!faylVydok) {
        cout << "Ошибка открытия файла!" << endl;
        return;
    }

    // Заголовок таблицы
    faylVydok << setw(20) << left << "Фамилия"
        << setw(30) << "Должность"
        << setw(15) << "Дата рождения"
        << setw(8) << right << "Опыт"
        << setw(12) << right << "Зарплата" << endl;
    faylVydok << string(90, '-') << endl;  // Разделитель

    for (const auto& sotr : sotrudniki) {
        faylVydok << setw(20) << left << sotr.surname
            << setw(30) << sotr.dolzhnost
            << setw(2) << right << sotr.dataR.day << "." << setw(2) << sotr.dataR.month << "." << sotr.dataR.year << "  "
            << setw(10) << right << sotr.opyt << "  "
            << setw(8) << sotr.zarplata << " руб." << endl;
    }
}

// Функция сравнения только по дате рождения
bool sravnitPoDate(const Sotrudnik& a, const Sotrudnik& b) {
    if (a.dataR.year != b.dataR.year)
        return a.dataR.year < b.dataR.year;
    if (a.dataR.month != b.dataR.month)
        return a.dataR.month < b.dataR.month;
    return a.dataR.day < b.dataR.day;
}

// Сортировка перемешиванием 
void SortPer(vector<Sotrudnik>& mass) {
    bool swapped = true;
    int start = 0;
    int end = mass.size() - 1;

    while (swapped) {
        swapped = false;

        // Проход слева направо
        for (int i = start; i < end; ++i) {
            if (!sravnitPoDate(mass[i], mass[i + 1])) {
                swap(mass[i], mass[i + 1]);
                swapped = true;
            }
        }

        if (!swapped) break; // Если не было обменов, массив отсортирован

        swapped = false;
        end--;

        // Проход справа налево
        for (int i = end - 1; i >= start; --i) {
            if (!sravnitPoDate(mass[i], mass[i + 1])) {
                swap(mass[i], mass[i + 1]);
                swapped = true;
            }
        }

        start++;
    }
}

int main() {
    setlocale(LC_ALL, "RU");

    vector<Sotrudnik> sotrudniki = chitaySotrudnikov("input2.txt");

    // Сортировка перемешиванием
    SortPer(sotrudniki);

    // Запись результата в файл
    zapisyvatSotrudnikov("output2.txt", sotrudniki);

    return 0;
}
