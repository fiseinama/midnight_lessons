//По году рождения с помощью сортировки подсчетом.

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>

using namespace std;

struct Data {
    int day = 0;
    int month = 0;
    int year = 0;
};

struct Sotrudnik {
    string surname;
    string dolzhnost;
    Data dataR;
    int opyt = 0;
    double zarplata = 0.0;
};

// Проверка корректности даты
bool proverkaDat(const Data& data) {
    if (data.year < 1900 || data.year > 2025 || data.month < 1 || data.month > 12 || data.day < 1) {
        return false;
    }

    int dayinMonth[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    if (data.year % 4 == 0 && (data.year % 100 != 0 || data.year % 400 == 0)) {
        dayinMonth[2] = 29;
    }

    return data.day <= dayinMonth[data.month];
}

// Разбор даты из строки формата "дд.мм.гггг"
Data razborDat(const string& strokaDat) {
    Data data = { 0, 0, 0 };
    char tochka1, tochka2;
    stringstream ss(strokaDat);
    if (!(ss >> data.day >> tochka1 >> data.month >> tochka2 >> data.year) || tochka1 != '.' || tochka2 != '.') {
        cout << "Неверный формат даты: " << strokaDat << endl;
        return data;
    }

    if (!proverkaDat(data)) {
        cout << "Некорректная дата: " << strokaDat << endl;
        return data;
    }
    return data;
}

// Чтение сотрудников из файла
vector<Sotrudnik> chitaySotrudnikov(const string& fio) {
    ifstream faylVhod(fio);
    vector<Sotrudnik> sotrudniki;
    string stroka;

    while (getline(faylVhod, stroka)) {
        stringstream ss(stroka);
        Sotrudnik sotr;
        string strokaDat;

        getline(ss, sotr.surname, ',');  // Читаем фамилию до запятой
        ss.ignore(); // Пропускаем пробел после запятой

        getline(ss, sotr.dolzhnost, ','); // Читаем должность до запятой
        ss.ignore();

        ss >> strokaDat >> sotr.opyt;
        ss.ignore(); // Пропускаем пробел перед зарплатой
        ss >> sotr.zarplata;

        sotr.dataR = razborDat(strokaDat);

        sotrudniki.push_back(sotr);
    }

    return sotrudniki;
}

// Запись сотрудников в файл
void zapisyvatSotrudnikov(const string& fio, const vector<Sotrudnik>& sotrudniki) {
    ofstream faylVydok(fio);
    if (!faylVydok) {
        cout << "Ошибка открытия файла!" << endl;
        return;
    }

    // Заголовок таблицы
    faylVydok << setw(20) << left << "Фамилия"
        << setw(30) << "Должность"
        << setw(15) << "Дата рождения"
        << setw(8) << right << "Опыт"
        << setw(12) << right << "Зарплата" << endl;
    faylVydok << string(90, '-') << endl;  // Разделитель

    for (const auto& sotr : sotrudniki) {
        faylVydok << setw(20) << left << sotr.surname
            << setw(30) << sotr.dolzhnost
            << setw(2) << right << sotr.dataR.day << "." << setw(2) << sotr.dataR.month << "." << sotr.dataR.year << "  "
            << setw(10) << right << sotr.opyt << "  "
            << setw(8) << sotr.zarplata << " руб." << endl;
    }
}

// Сортировка подсчетом по году рождения
vector<Sotrudnik> sortirovatPodschetom(const vector<Sotrudnik>& sotrudniki) {
    if (sotrudniki.empty()) return sotrudniki;

    // Находим минимальный и максимальный год
    int minYear = sotrudniki[0].dataR.year;
    int maxYear = sotrudniki[0].dataR.year;
    for (const auto& sotr : sotrudniki) {
        if (sotr.dataR.year < minYear) minYear = sotr.dataR.year;
        if (sotr.dataR.year > maxYear) maxYear = sotr.dataR.year;
    }

    // Создаем массив для подсчета
    vector<int> count(maxYear - minYear + 1, 0);

    // Подсчитываем количество сотрудников для каждого года
    for (const auto& sotr : sotrudniki) {
        count[sotr.dataR.year - minYear]++;
    }

    // Преобразуем count так, чтобы он содержал позиции
    for (size_t i = 1; i < count.size(); ++i) {
        count[i] += count[i - 1];
    }

    // Создаем массив
    vector<Sotrudnik> sortedSotrudniki(sotrudniki.size());

    // Заполняем 
    for (int i = sotrudniki.size() - 1; i >= 0; --i) {
        sortedSotrudniki[count[sotrudniki[i].dataR.year - minYear] - 1] = sotrudniki[i];
        count[sotrudniki[i].dataR.year - minYear]--;
    }

    return sortedSotrudniki;
}

int main() {
    setlocale(LC_ALL, "RU");

    vector<Sotrudnik> sotrudniki = chitaySotrudnikov("input.txt");

    // Сортировка подсчетом по году рождения
    vector<Sotrudnik> sortedSotrudniki = sortirovatPodschetom(sotrudniki);

    zapisyvatSotrudnikov("output.txt", sortedSotrudniki);

    return 0;
}
